service: ml-apps
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
plugins:
  - serverless-vpc-plugin
  
provider:
  
  name: aws
  runtime: python3.8
  ecr:
    images:
      ml-image:
        path: ./ml-inference/
  timeout: 600
  memorySize: 1000
  region: eu-west-3
  vpc:
    securityGroupIds:
      -  Fn::GetAtt: [MySecurityGroup, Ref]
    subnetIds:
      -   Fn::GetAtt: [MySubnet, Ref]  


# resources:
#  AWSTemplateFormatVersion: '2010-09-09'
#  Transform: AWS::Serverless-2016-10-31
#  Resources: 
#   EfsFileSystem:
#     Type: AWS::EFS::FileSystem
#   MountTargetA:
#     Type: AWS::EFS::MountTarget
#     Properties:
#       FileSystemId: !Ref EfsFileSystem
#       SubnetId: ${self:custom.}
#       SecurityGroups:
#         - !Ref EfsLambdaSecurityGroup  
#   AccessPoint:
#     Type: AWS::EFS::AccessPoint
#     Properties:
#       FileSystemId: !Ref EfsFileSystem
#       PosixUser:
#         Gid: "1000"
#         Uid: "1000"
#       RootDirectory:
#         Path: "/ml"
#         CreationInfo:
#           OwnerGid: "1000"
#           OwnerUid: "1000"
#           Permissions: "755"  
  
  
# you can overwrite defaults here
#  stage: dev
      
functions:
  apps3:
    environment:
        MODEL_DIR: /mnt/ml/models/
          
    handler: s3-efs/apps3.lambda_handler
    
    runtime: python3.8   
    events:
      - s3:
          bucket: bucket-example-mls3
          event: s3:ObjectCreated:*

  appml1:  
    image:
      name: ml-image 
    runtime: python3.8  
    events:  
       - httpApi:
          path: /
          method: get

resources:
  Resources:
    MySubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: ${self:custom.vpcId}
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: eu-west-3c
    MySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: My Lambda Security Group
        VpcId:  ${self:custom.vpcId}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: MySecurityGroup        

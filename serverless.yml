service: ml-apps
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  ecr:
    images:
      ml-image:
        path: ./ml-inference/
  timeout: 300
  memorySize: 1000
  region: eu-west-3
  
# you can overwrite defaults here
#  stage: dev
resources:
 AWSTemplateFormatVersion: '2010-09-09'
 Transform: AWS::Serverless-2016-10-31
 Resources:
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref SubnetAPrivate
      SecurityGroups:
        - !Ref EfsLambdaSecurityGroup
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: ml-bucket-test-hm5
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        Path: "/ml"
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "755"  
  MLModelUploadFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetA
    Properties:
      CodeUri: s3-efs/
      Handler: app.lambda_handler
      Runtime: python3.8       
      VpcConfig:
        SecurityGroupIds:
          - !Ref EfsLambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetAPrivate
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/ml
      Policies:
        - S3CrudPolicy: 
            BucketName: !Ref SrcBucket
        - EFSWriteAccessPolicy:
            FileSystem: !Ref EfsFileSystem
            AccessPoint: !Ref AccessPoint
      Events:
        UploadMLModelEvent:
          Type: S3
          Properties:
            Bucket: !Ref MyS3Bucket
            Events: s3:ObjectCreated:*

  InferenceFunction:
    Type: AWS::Serverless::Function 
    DependsOn: 
      - MountTargetA
    Properties:
      PackageType: Image
      VpcConfig:
        SecurityGroupIds:
          - !Ref EfsLambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetAPrivate
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/ml
      Policies:
        - S3CrudPolicy: 
            BucketName: !Ref SrcBucket
        - EFSWriteAccessPolicy:
            FileSystem: !Ref EfsFileSystem
            AccessPoint: !Ref AccessPoint 
      Events:
        Inference:
          Type: Api 
          Properties:
            Path: /ocr
            Method: POST

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./ml-inference
      DockerTag: python3.8-v1       
# functions:
#   app1:
#     handler: s3-efs/app.lambda_handler
#     events:
#       - S3:
#            bucket: ml-bucket-test-hm5
#            event: s3:ObjectCreated:*


#   app2:  
#     image:
#       name: ml-image 
#       events:  
#        - httpApi:
#           path: /
#           method: get

service: ml-apps-test
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name



# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details


  
provider:
  name: aws
  runtime: python3.8
  ecr:
    images:
      ml-image:
        path: ./ml-inference/
  region: eu-west-3	

resources:
  Resources:
    EfsLambdaVpc:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: '10.0.0.0/16'
    InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
        Tags:
        - Key: Name
          Value:  '10.0.0.0/16'
    VPCGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: 
           Ref: EfsLambdaVpc
        InternetGatewayId: 
           Ref: InternetGateway 
    SubnetAPublic:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: 
           Ref: EfsLambdaVpc
        AvailabilityZone: eu-west-3b
        MapPublicIpOnLaunch: true
        CidrBlock: "10.0.0.0/24"              

    SubnetAPrivate:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: 
           Ref: EfsLambdaVpc
        AvailabilityZone: eu-west-3a
        CidrBlock: '10.0.1.0/24'
    RouteTableAPublic:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: 
           Ref: EfsLambdaVpc
    RouteTableAPrivate:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: 
           Ref: EfsLambdaVpc
    RouteTableAssociationAPublic:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: 
           Ref: SubnetAPublic
        RouteTableId: 
           Ref: RouteTableAPublic
    RouteTableAssociationAPrivate:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: 
           Ref: SubnetAPrivate
        RouteTableId: 
           Ref: RouteTableAPrivate
    RouteTablePublicAInternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: 
           Ref: RouteTableAPublic
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: 
           Ref: InternetGateway
    EIPA:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
    NatGatewayA:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIPA.AllocationId'
        SubnetId: 
           Ref: SubnetAPublic      

    RouteA:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: 
           Ref: RouteTableAPrivate
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: 
           Ref: NatGatewayA      
    EfsLambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Security group for NAT Gateway Lambda'
        VpcId: 
           Ref: EfsLambdaVpc
        SecurityGroupEgress:
          - CidrIp: "0.0.0.0/0"
            # FromPort: 0
            # ToPort: 65535
            IpProtocol: -1
        SecurityGroupIngress:
          - CidrIp: "0.0.0.0/0"
            # FromPort: 0
            # ToPort: 65535
            IpProtocol: -1

    EfsFileSystem:
      Type: 'AWS::EFS::FileSystem'
      Properties: 
          AvailabilityZoneName: eu-west-3a

    MountTargetA:
      Type: 'AWS::EFS::MountTarget'
      Properties:
        FileSystemId: 
           Ref: EfsFileSystem
        SubnetId: 
           Ref: SubnetAPrivate
        SecurityGroups:
         - Ref: "EfsLambdaSecurityGroup"

    AccessPoint:
      DependsOn: MountTargetA
      Type: 'AWS::EFS::AccessPoint'
      Properties:
        FileSystemId: 
           Ref: EfsFileSystem
        PosixUser:
          Gid: '1000'
          Uid: '1000'
        RootDirectory:
          Path: '/ml'
          CreationInfo:
            OwnerGid: '1000'
            OwnerUid: '1000'
            Permissions: '755'  
  
  
# you can overwrite defaults here
#  stage: dev
      
functions:
  apps3:
    environment:
      MODEL_DIR: /mnt/ml/models/
    handler: s3-efs/apps3.lambda_handler
    runtime: python3.8   
    
    vpc:
      securityGroupIds:
        - Ref: EfsLambdaSecurityGroup
      subnetIds:
        - Ref: SubnetAPrivate
    fileSystemConfig:
      localMountPath: /mnt/ml
      arn: { "Fn::GetAtt": [ AccessPoint, Arn ] }
    # Policies:
    #   - S3CrudPolicy: 
    #       BucketName: bucket-example-mls3
    #   - EFSWriteAccessPolicy:
    #       FileSystem: EfsFileSystem
    #        AccessPoint: AccessPoint
    events:
      - s3:
          bucket: bucket-example-mls3
          event: s3:ObjectCreated:*

  appml1:  
    image:
      name: ml-image 
    runtime: python3.8  
    events:  
       - httpApi:
          path: /
          method: get
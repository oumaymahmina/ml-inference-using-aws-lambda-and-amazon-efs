service: ml-apps
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
plugins:
  - serverless-vpc-plugin
provider:
  name: aws
  runtime: python3.8
  ecr:
    images:
      ml-image:
        path: ./ml-inference/
  timeout: 600
  memorySize: 1000
  region: us-east-1
custom:
  vpcConfig:
    # Whether plugin is enabled. Can be used to selectively disable plugin
    # on certain stages or configurations. Defaults to true.
    enabled: true
 
    cidrBlock: '10.0.0.0/16'
 
    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
    createNatGateway: false
 
    # When enabled, the DB subnet will only be accessible from the Application subnet
    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
    createNetworkAcl: false
 
    # Whether to create the DB subnet
    createDbSubnet: false
 
    # Whether to enable VPC flow logging to an S3 bucket
    createFlowLogs: false
 
    # Whether to create a bastion host
    createBastionHost: false
    # bastionHostKeyName: MyKey # required if creating a bastion host
 
    # Whether to create a NAT instance
    createNatInstance: false
 
    # Whether to create AWS Systems Manager (SSM) Parameters
    createParameters: false
 
    # Optionally specify AZs (defaults to auto-discover all availabile AZs)
    zones:
      - us-east-1a
      - us-east-1b
      - us-east-1c  
resources:
 AWSTemplateFormatVersion: '2010-09-09'
 Transform: AWS::Serverless-2016-10-31
 Resources: 
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: mybucket-ml-models
      
  EfsLambdaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '10.0.0.0/16'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref EfsLambdaVpc
      InternetGatewayId: !Ref InternetGateway
      
  SubnetAPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EfsLambdaVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      CidrBlock: "10.0.0.0/24"
      
  SubnetAPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EfsLambdaVpc
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: "10.0.1.0/24"

  RouteTableAPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EfsLambdaVpc

  RouteTableAPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EfsLambdaVpc

  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTableAPublic
      
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTableAPrivate
      
  RouteTablePublicAInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableAPublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  EIPA:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      
  NatGatewayA:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPA.AllocationId'
      SubnetId: !Ref SubnetAPublic

  RouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTableAPrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayA
        
  EfsLambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for NAT Gateway Lambda'
      VpcId: !Ref EfsLambdaVpc
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          # FromPort: 0
          # ToPort: 65535
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          # FromPort: 0
          # ToPort: 65535
          IpProtocol: -1     
  
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    
  MountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref SubnetAPrivate
      SecurityGroups:
        - !Ref EfsLambdaSecurityGroup

  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Gid: "1000"
        Uid: "1000"
      RootDirectory:
        Path: "/ml"
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "755"
          
  MLModelUploadFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MountTargetA
    Properties:
      CodeUri: s3://${MyS3Bucket}/
      Handler: app.lambda_handler
      Runtime: python3.8       
      VpcConfig:
        SecurityGroupIds:
          - !Ref EfsLambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetAPrivate
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/ml
      Policies:
        - S3CrudPolicy: 
            BucketName: mybucket-ml-models
        - EFSWriteAccessPolicy:
            FileSystem: !Ref EfsFileSystem
            AccessPoint: !Ref AccessPoint
      Events:
        UploadMLModelEvent:
          Type: S3
          Properties:
            Bucket: !Ref MyS3Bucket
            Events: s3:ObjectCreated:*

  InferenceFunction:
    Type: AWS::Serverless::Function 
    DependsOn: 
      - MountTargetA
    Properties:
      PackageType: Image
      ImageUri: 772561320311.dkr.ecr.us-east-1.amazonaws.com/serverless-ml-apps-dev:ml-image
      VpcConfig:
        SecurityGroupIds:
          - !Ref EfsLambdaSecurityGroup
        SubnetIds:
          - !Ref SubnetAPrivate
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/ml
      Policies:
        - S3CrudPolicy: 
            BucketName: mybucket-ml-models
        - EFSWriteAccessPolicy:
            FileSystem: !Ref EfsFileSystem
            AccessPoint: !Ref AccessPoint 
      Events:
        Inference:
          Type: Api 
          Properties:
            Path: /ocr
            Method: POST

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./ml-inference
      DockerTag: python3.8-v1
functions:
  apps3:
    environment:
        MODEL_DIR: /mnt/ml/models/
          
    handler: s3-efs/apps3.lambda_handler
    runtime: python3.8
    events:
      - s3:
          bucket: mybucket-ml-models
          event: s3:ObjectCreated:*

  appml1:  
    image:
      name: ml-image 
    runtime: python3.8  
    events:  
       - httpApi:
          path: /
          method: get
